const c=i=>Object.values(i.diceCount).some(e=>e<=0),l=i=>Object.entries(i.diceCount).reduce((e,[t,n])=>(e[t]=n<=0?"WON":"LOST",e),{});Rune.initLogic({minPlayers:1,maxPlayers:4,setup:i=>{const e=Object.fromEntries(i.map(t=>[t,5]));return{gameDice:[],diceCount:e,currentPlayerIndex:0,previousPlayerIndex:-1,selectedPlayerId:"",playerToRoll:!0,playerPlaying:!1,gameOver:!1,showHelp:!1,selectedDieIndex:-1}},actions:{shareCake:({playerId:i,playerIds:e,dieIndex:t},{game:n})=>{if(i===void 0)i="spectator";else if(n.diceCount[i]===void 0)throw Rune.invalidAction();const r=[];for(const o of e)o!==i&&o!=null&&r.push(o);r.forEach(o=>{if(o===void 0||n.diceCount[o]===void 0)throw Rune.invalidAction();n.diceCount[o]+=1}),n.diceCount[i]+=-1,n.gameDice.splice(t,1),c(n)&&Rune.gameOver({players:l(n)})},popBalloons:({playerId:i,dieIndex:e},{game:t})=>{if(i===void 0)i="spectator";else if(t.diceCount[i]===void 0)throw Rune.invalidAction();t.diceCount[i]+=-1,t.gameDice.splice(e,1),c(t)&&Rune.gameOver({players:l(t)})},setSelectedDieIndex:({dieIndex:i},{game:e})=>{e.selectedDieIndex=i},giveGifts:({playerId:i,opponentId:e,dieIndex:t},{game:n})=>{if(i===void 0)i="spectator";else if(n.diceCount[i]===void 0)throw Rune.invalidAction();let r=Math.floor(Math.random()*4-1);r===0&&(r=1),n.diceCount[e]+=r,n.diceCount[i]+=-1,n.gameDice.splice(t,1),c(n)&&Rune.gameOver({players:l(n)})},updateDiceCount:({playerId:i,amount:e},{game:t})=>{if(i===void 0)i="spectator";else if(t.diceCount[i]===void 0)throw Rune.invalidAction();t.diceCount[i]+=e,c(t)&&Rune.gameOver({players:l(t)})},rollDice:({numDice:i},{game:e})=>{e.gameDice=Array.from({length:i},()=>Math.floor(Math.random()*6)+1),e.gameDice.forEach((t,n)=>{t===6&&(e.gameDice[n]=Math.random()<.5?5:6)}),e.playerToRoll=!1,e.playerPlaying=!0},nextPlayer:({nextIndex:i},{game:e})=>{e.gameOver||(e.previousPlayerIndex=e.currentPlayerIndex,e.currentPlayerIndex=i,e.playerToRoll=!0,e.playerPlaying=!1,e.gameDice=[])},adjustGameDice:({index:i},{game:e})=>{e.gameDice.splice(i,1)},setPreviousPlayer:({playerIndex:i},{game:e})=>{e.previousPlayerIndex=i},setSelectedPlayerId:({playerId:i},{game:e})=>{e.selectedPlayerId=i}},events:{playerJoined:(i,{game:e})=>{e.diceCount[i]=5},playerLeft(i,{game:e}){delete e.diceCount[i],e.currentPlayerIndex=Object.keys(e.diceCount).length-1,e.playerToRoll=!0,e.playerPlaying=!1,e.gameDice=[]}}});
